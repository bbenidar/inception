version: '3.7'

services:
  mariadb:
    container_name: mariadb			# Le nom du container, oui vraiment.
    networks:
      - inception            			# à quel network il appartient
    build: 
      context: ./MARIADB/	# ou se trouve son Dockerfile
      dockerfile: Dockerfile	                # le fichier d'environnement pour transmettre les variables
    environment:
      - SQL_DATABASE=mydb
      - SQL_USER=mysql
      - SQL_PASSWORD=bbenidar
      - SQL_ROOT_PASSWORD=root
    volumes:                        # Voir plus bas
      - mariadb:/var/lib/mysql
    restart: unless-stopped         # redémarre tant qu'il n'est pas stoppé 
    expose:                         # le port à exposer
      - "3306"

  nginx:
    container_name: nginx
    volumes:
      - wordpress:/var/www/wordpress
    networks:
      - inception
    depends_on:        			 # Nouvelle ligne, indiquant de ne pas démarrer NGINX tant que WordPress n'a pas démarré.
      - wordpress
    build: 
      context: ./NGINX/			# ou se trouve le Dockerfile
      dockerfile: Dockerfile
    env_file: .env
    ports:
    - "443:443" 		# on indique le port qui sera exposé a la machine locale
    restart: on-failure 		# Ici nous changeons, le container redémarrera uniquement en cas de crash.

  wordpress:
    container_name: wordpress
    environment:
      WORDPRESS_DB_HOST: mariadb
      WORDPRESS_DB_USER: mysql
      WORDPRESS_DB_PASSWORD: bbenidar
      WORDPRESS_DB_NAME: mydb
    volumes:
      - wordpress:/var/www/wordpress
    networks:
      - inception
    build: 
      context: ./WORDPRESS/
      dockerfile: Dockerfile
    depends_on:    					# WordPress démarrera uniquement après MariaDB (sinon il ne pourra pas configurer la base de données...)
      - mariadb
    restart: on-failure
    expose: 
      - "9000"


networks:
  backend:
    driver: bridge

volumes:
  wordpress:
    driver: local # ici nous stockons le volume en local
    driver_opts:
      type: 'none' 									# aucun type spécifique
      o: 'bind'
      device: '/Users/login/data/wordpress' 		#Ou stocker le dossier sur votre ordinateur en local
  mariadb:
    driver: local
    driver_opts:
      type: 'none' 
      o: 'bind'										 # Les Bind Mounts sont des volumes qui se montent sur un chemin d'accès à l'hôte, et ils peuvent être modifiés par d'autres processus en dehors de docker.
      device: '/Users/login/data/mariadb'	


networks:
  inception:
    driver: bridge